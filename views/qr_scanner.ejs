<!DOCTYPE html>
<html lang="en">
<!-- Head section remains exactly the same -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Barcode Scanner</title>
    <style>
        /* All styles remain exactly the same */
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
        }

        #scanner-container {
            width: 100%;
            max-width: 500px;
            text-align: center;
        }

        #video-feed {
            max-width: 100%;
            border: 2px solid #333;
            border-radius: 10px;
        }

        #result-display {
            margin-top: 20px;
            padding: 10px;
            background-color: #f0f0f0;
            border-radius: 5px;
        }

        #error-display {
            color: red;
            margin-top: 20px;
        }
    </style>
</head>

<body>
    <!-- Body HTML remains exactly the same -->
    <div id="scanner-container">
        <h2>Invoice Barcode Scanner</h2>
        <video id="video-feed" autoplay playsinline></video>
        <canvas id="canvas" style="display:none;"></canvas>
        <div id="result-display"></div>
        <div id="error-display"></div>
        <div id="camera-loading" style="display:none;">Loading camera...</div>
    </div>
    <script>
        const videoFeed = document.getElementById('video-feed');
        const canvas = document.getElementById('canvas');
        const resultDisplay = document.getElementById('result-display');
        const errorDisplay = document.getElementById('error-display');

        let scanningInterval;
        let errorTimeout;

        async function startCamera() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({
                    video: { facingMode: 'environment' }
                });
                videoFeed.srcObject = stream;
                videoFeed.onloadedmetadata = () => {
                    videoFeed.play();
                };
            } catch (err) {
                console.error('Camera access error:', err);
                showError('Camera access denied: ' +
                    (err.name === 'NotAllowedError'
                        ? 'Please grant camera permissions'
                        : err.message));
            }
        }

        // New function to handle error display
        function showError(message) {
            errorDisplay.textContent = message;
            // Clear existing timeout if any
            if (errorTimeout) {
                clearTimeout(errorTimeout);
            }
            // Clear error message after 5 seconds
            errorTimeout = setTimeout(() => {
                errorDisplay.textContent = '';
            }, 5000);
        }

        async function scanBarcode() {
            if (videoFeed.videoWidth === 0 || videoFeed.videoHeight === 0) {
                return;
            }

            if (!('BarcodeDetector' in window)) {
                showError('Barcode scanning not supported in this browser');
                return;
            }

            const context = canvas.getContext('2d');
            canvas.width = videoFeed.videoWidth;
            canvas.height = videoFeed.videoHeight;
            context.drawImage(videoFeed, 0, 0, canvas.width, canvas.height);

            const barcodeDetector = new BarcodeDetector({ 
                formats: ['code_128', 'code_39', 'ean_13'] 
            });

            try {
                const barcodes = await barcodeDetector.detect(canvas);

                if (barcodes.length > 0) {
                    const barcodeData = barcodes[0].rawValue;
                    await processBarcode(barcodeData);
                }
            } catch (err) {
                console.error('Barcode detection error:', err);
                showError('Barcode detection error: ' + err.message);
            }
        }

        function stopScanning() {
            clearInterval(scanningInterval);
            if (videoFeed.srcObject) {
                const tracks = videoFeed.srcObject.getTracks();
                tracks.forEach(track => track.stop());
            }
        }

        async function processBarcode(barcodeData) {
            try {
                const response = await fetch('/api/scan', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ barcode_data: barcodeData })
                });

                const result = await response.json();

                if (response.ok) {
                    resultDisplay.innerHTML = `
                        <h3>Status Updated Successfully</h3>
                        <p>Current Status: ${result.currentStatus}</p>
                    `;
                    // Success message will stay, but scanning continues
                } else {
                    showError(result.message || 'Error processing barcode');
                }
            } catch (err) {
                showError('Network error: ' + err.message);
            }
        }

        function startScanning() {
            scanningInterval = setInterval(scanBarcode, 1000);
        }

        startCamera();
        startScanning();
    </script>
</body>

</html>